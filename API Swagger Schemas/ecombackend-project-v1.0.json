{
  "openapi": "3.1.0",
  "info": {
    "title": "MCA Project Ecommerce Backend",
    "description": "API documentation for the MCA Project Ecommerce Backend",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/mcaproject/ecombackend",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Addresses",
      "description": "Operations related to user addresses"
    },
    {
      "name": "Products",
      "description": "Operations related to products in the e-commerce store"
    },
    {
      "name": "Orders",
      "description": "Operations related to customer orders"
    },
    {
      "name": "Categories",
      "description": "Operations related to product categories"
    },
    {
      "name": "Carts",
      "description": "Operations related to user shopping carts"
    },
    {
      "name": "Users",
      "description": "Operations related to user accounts"
    },
    {
      "name": "User Interactions",
      "description": "Logging and retrieving user interactions with products for recommendation engine"
    },
    {
      "name": "Authentication",
      "description": "User authentication and JWT Token management"
    },
    {
      "name": "Recommendations",
      "description": "Operations related to product recommendations in the e-commerce store"
    }
  ],
  "paths": {
    "/api/1.0/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "description": "Retrieve a single user by their unique ID. Requires authentication.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user",
        "description": "Update details of an existing user, including addresses. Requires authentication.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user details. Include full address objects.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest",
                "example": {
                  "firstname": "John",
                  "lastname": "Doe",
                  "email": "updated@example.com",
                  "phoneNumber": "0987654321",
                  "shippingAddress": {
                    "street": "456 New St",
                    "city": "Newtown",
                    "state": "QC",
                    "postalCode": "B2B2B2",
                    "country": "Canada"
                  },
                  "billingAddress": {
                    "street": "456 New St",
                    "city": "Newtown",
                    "state": "QC",
                    "postalCode": "B2B2B2",
                    "country": "Canada"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data or address update failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Delete a user account by its ID. Requires authentication.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/1.0/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product by ID",
        "description": "Retrieve a single product by its unique ID.",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update an existing product",
        "description": "Update the details of an existing product by its ID.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "someLong",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product by ID",
        "description": "Delete a product from the database by its unique ID.",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the product to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/api/1.0/orders/{id}/status": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order status",
        "description": "Update the status of an existing order. Requires authentication.",
        "operationId": "updateOrderStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "newStatus",
            "in": "query",
            "description": "New status for the order (e.g., PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "PROCESSING",
                "SHIPPED",
                "DELIVERED",
                "CANCELLED"
              ]
            },
            "example": "SHIPPED"
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status or order not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get category by ID",
        "description": "Retrieve a single category by its unique ID.",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the category to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Update an existing category",
        "description": "Update details of an existing category. Requires authentication.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the category to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated category object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category",
                "example": {
                  "name": "Updated Electronics",
                  "description": "Updated description for electronic devices"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid category data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Delete a category",
        "description": "Remove a category by its ID. Requires authentication.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the category to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/1.0/carts/update-quantity": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Update product quantity in cart",
        "description": "Update the quantity of a product in the user's cart.",
        "operationId": "updateProductQuantityInCart",
        "requestBody": {
          "description": "Request body for updating product quantity in cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "userId": 1,
                  "productId": 101,
                  "newQuantity": 3
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product quantity updated in cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., product not found, insufficient stock, invalid quantity)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "404": {
            "description": "Cart item not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/addresses/{id}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Get address by ID",
        "description": "Retrieve a single address by its unique ID. Requires authentication.",
        "operationId": "getAddressById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the address to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "summary": "Update an existing address",
        "description": "Update details of an existing address. Requires authentication.",
        "operationId": "updateAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the address to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated address object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address",
                "example": {
                  "street": "789 Oak Ave Updated",
                  "city": "Villagetown",
                  "state": "AB",
                  "postalCode": "C3C3C3",
                  "country": "Canada"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Invalid address data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "404": {
            "description": "Address not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "summary": "Delete an address",
        "description": "Remove an address by its ID. Requires authentication.",
        "operationId": "deleteAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the address to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Address deleted successfully"
          },
          "404": {
            "description": "Address not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/1.0/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account with shipping and billing addresses.",
        "operationId": "registerUser",
        "requestBody": {
          "description": "User details including username, password, email, phoneNumber, shippingAddress, and billingAddress.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegistrationRequest",
                "example": {
                  "username": "testuser",
                  "password": "password123",
                  "firstname": "John",
                  "lastname": "Doe",
                  "email": "test@example.com",
                  "phoneNumber": "1234567890",
                  "shippingAddress": {
                    "street": "123 Main St",
                    "city": "Anytown",
                    "state": "ON",
                    "postalCode": "A1A1A1",
                    "country": "Canada"
                  },
                  "billingAddress": {
                    "street": "123 Main St",
                    "city": "Anytown",
                    "state": "ON",
                    "postalCode": "A1A1A1",
                    "country": "Canada"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data, username or email already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products with pagination and optional filtering",
        "description": "Retrieve a paginated list of all available products. Can be filtered by category name or product name via query parameters.",
        "operationId": "getAllProducts",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "description": "Page number (0-indexed)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Name of the category to filter products (e.g., Automotive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Keyword to search for in product names (case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a new product",
        "description": "Create a new product with details provided in the request body.",
        "operationId": "createProduct",
        "parameters": [
          {
            "name": "someLong",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders/place": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place a new order",
        "description": "Creates a new order from the user's current cart.",
        "operationId": "placeOrder",
        "requestBody": {
          "description": "Request body for placing an order",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "userId": 1,
                  "shippingAddressId": 1
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order placed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., user not found, empty cart, insufficient stock, invalid address)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/interactions/log": {
      "post": {
        "tags": [
          "User Interactions"
        ],
        "summary": "Log a user interaction",
        "description": "Records a user's interaction (e.g., view, add to cart, purchase) with a product.",
        "operationId": "logInteraction",
        "requestBody": {
          "description": "Request body for logging user interaction",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "userId": 1,
                  "productId": 101,
                  "interactionType": "VIEW"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Interaction logged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., user or product not found, invalid interaction type)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all categories",
        "description": "Retrieve a list of all product categories.",
        "operationId": "getAllCategories",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Create a new category",
        "description": "Add a new product category. Requires authentication.",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Category object to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category",
                "example": {
                  "name": "Electronics",
                  "description": "Gadgets and electronic devices"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid category data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/carts/add": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Add product to cart",
        "description": "Add a specified quantity of a product to the user's cart. Creates cart if it doesn't exist.",
        "operationId": "addProductToCart",
        "requestBody": {
          "description": "Request body for adding product to cart",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "userId": 1,
                  "productId": 101,
                  "quantity": 2
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product added/updated in cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., product not found, insufficient stock, invalid quantity)",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate user and get JWT token",
        "description": "Logs in a user with username and password, returning a JWT token for subsequent authenticated requests.",
        "operationId": "createAuthenticationToken",
        "requestBody": {
          "description": "Request body for placing an order",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": {
                  "username": "username",
                  "password": "password"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication successful, JWT token returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "jwt": "eyJhbGciOiJIUzI1Ni..."
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Get all addresses",
        "description": "Retrieve a list of all addresses. Requires authentication.",
        "operationId": "getAllAddresses",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Create a new address",
        "description": "Add a new address. Requires authentication.",
        "operationId": "createAddress",
        "requestBody": {
          "description": "Address object to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Address",
                "example": {
                  "street": "789 Oak Ave",
                  "city": "Villagetown",
                  "state": "AB",
                  "postalCode": "C3C3C3",
                  "country": "Canada"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Address created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Invalid address data",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of all registered users. Requires authentication.",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "Successfully retrieved list of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/users/username/{username}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by username",
        "description": "Retrieve a single user by their username. Requires authentication.",
        "operationId": "getUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username of the user to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/recommendations/{userId}": {
      "get": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Get recommendations for a user",
        "description": "Retrieve personalized product recommendations for a specific user.",
        "operationId": "getRecommendations",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of product recommendations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (e.g., user not found, insufficient data to generate recommendations)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search products by name",
        "description": "Search for products whose names contain the specified keyword (case-insensitive).",
        "operationId": "searchProductsByName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Keyword to search for in product names",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/products/low-stock": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product low stock",
        "description": "Get list of product have stock below threshold.",
        "operationId": "getLowStockProducts",
        "parameters": [
          {
            "name": "threshold",
            "in": "query",
            "description": "Threshold value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/products/category/{categoryName}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get products by category",
        "description": "Retrieve a list of products belonging to a specific category.",
        "operationId": "getProductsByCategoryName",
        "parameters": [
          {
            "name": "categoryName",
            "in": "path",
            "description": "Name of the category to filter products",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products by category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Retrieve a list of all orders. Requires authentication.",
        "operationId": "getAllOrders",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOrder"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order by ID",
        "description": "Retrieve a single order by its unique ID. Requires authentication.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders/user/{userId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders by user ID",
        "description": "Retrieve a list of orders placed by a specific user. Requires authentication.",
        "operationId": "getOrdersByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user whose orders to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number to retrieve",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved orders for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOrder"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders/status-count": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get order counts by status",
        "description": "Returns a map of the total number of orders for each status. This is a dashboard metric.",
        "operationId": "getOrdersByStatusCount",
        "responses": {
          "200": {
            "description": "Successfully retrieved order status counts",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/orders/dashboard/metrics": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get orders dashboard metrics",
        "description": "Provide orders statistics for ADMIN dashboard. Requires authentication.",
        "operationId": "getDashboardMetrics",
        "responses": {
          "200": {
            "description": "Successfully retrieved orders statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/interactions/user/{userId}": {
      "get": {
        "tags": [
          "User Interactions"
        ],
        "summary": "Get all interactions for a user",
        "description": "Retrieve all recorded interactions for a specific user. Requires authentication.",
        "operationId": "getInteractionsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user whose interactions to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user interactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/interactions/user/{userId}/type/{interactionType}": {
      "get": {
        "tags": [
          "User Interactions"
        ],
        "summary": "Get interactions of a specific type for a user",
        "description": "Retrieve interactions filtered by type (e.g., VIEW, PURCHASE) for a specific user. Requires authentication.",
        "operationId": "getInteractionsByUserAndType",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user whose interactions to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "interactionType",
            "in": "path",
            "description": "Type of interaction to filter by (e.g., VIEW, ADD_TO_CART, PURCHASE)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "VIEW",
                "ADD_TO_CART",
                "REMOVE_FROM_CART",
                "PURCHASE",
                "REVIEW"
              ]
            },
            "example": "PURCHASE"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered user interactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInteraction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid interaction type",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInteraction"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/carts/user/{userId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get user's cart",
        "description": "Retrieve the shopping cart for a specific user.",
        "operationId": "getUserCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user whose cart to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        }
      }
    },
    "/api/1.0/carts/remove": {
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Remove product from cart",
        "description": "Remove a specific product from the user's cart.",
        "operationId": "removeProductFromCart",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "ID of the product to remove",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product removed from cart successfully"
          },
          "404": {
            "description": "Cart item or product not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/1.0/carts/clear/{userId}": {
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Clear user's cart",
        "description": "Remove all items from the user's shopping cart.",
        "operationId": "clearCart",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user whose cart to clear",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cart cleared successfully"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "description": "Request body for updating existing user details",
        "properties": {
          "firstname": {
            "type": "string",
            "description": "First name of the user",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "New email address for the user",
            "example": "updated@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "New phone number for the user",
            "example": "0987654321"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Updated shipping address details"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Updated billing address details"
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "cartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItem"
            }
          },
          "totalAmount": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "cart": {
            "$ref": "#/components/schemas/Cart"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "priceAtAddition": {
            "type": "number"
          },
          "discountAtAddition": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "imageUrl": {
            "type": "string"
          },
          "stockQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "role": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "cart": {
            "$ref": "#/components/schemas/Cart"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "type": "integer",
            "format": "int64"
          },
          "orderDate": {
            "type": "string",
            "format": "date-time"
          },
          "totalAmount": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "SHIPPED",
              "DELIVERED",
              "CANCELLED"
            ]
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "price": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        }
      },
      "UserRegistrationRequest": {
        "type": "object",
        "description": "Request body for new user registration",
        "properties": {
          "username": {
            "type": "string",
            "description": "Unique username for the user",
            "example": "testuser"
          },
          "password": {
            "type": "string",
            "description": "Raw password for the user (will be hashed)",
            "example": "password123"
          },
          "firstname": {
            "type": "string",
            "description": "First name of the user",
            "example": "John"
          },
          "lastname": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Unique email address for the user",
            "example": "test@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the user",
            "example": 1234567890
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Shipping address details"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address",
            "description": "Billing address details"
          }
        }
      },
      "UserInteraction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "interactionType": {
            "type": "string",
            "enum": [
              "VIEW",
              "ADD_TO_CART",
              "REMOVE_FROM_CART",
              "PURCHASE",
              "REVIEW"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Page": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageOrder": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "OrderStatsResponse": {
        "type": "object",
        "description": "Response body for order statistics",
        "properties": {
          "totalOrders": {
            "type": "integer",
            "format": "int64"
          },
          "totalSales": {
            "type": "number"
          }
        }
      }
    }
  }
}